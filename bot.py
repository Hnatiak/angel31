# -*- coding: utf-8 -*-

import types
import telebot
import config
import random
import logging
import datetime
#from telebot import types
#import sqlite3
#from sqlite3 import Error
from telebot import TeleBot, types
#from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
#from telegram.ext import CallbackContext
from datetime import datetime, time

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['help_bot'])
def greeting(message):
    bot.send_message(message.chat.id, "–£ –º–µ–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–∫—ñ –∫–æ–º–∞–Ω–¥–∏ —è–∫:\n<b>/–≤—ñ–¥ –≤–¥–∞—Ä–∏—Ç–∏</b>, \n<b>/–≤—ñ–¥ –æ–±–Ω—è—Ç–∏</b>, "
                                      "\n<b>/–≤—ñ–¥ –ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏</b> \n<b>/–≤—ñ–¥ –æ–±—Ä–∞–∑–∏—Ç–∏</b>\n<b>/–≤—ñ–¥ —á–º–æ–∫</b>\n<b>/–≤—ñ–¥ —à–ª—å–æ–ø</b>"
                                      "\n<b>/–≤—ñ–¥ —Å–∏–ª—å–Ω–∏–π—à–ª—å–æ–ø</b>\n<b>/–≤—ñ–¥ –∫–µ–∫—Å –∞–±–æ –∂ /–≤—ñ–¥ —Å–µ–∫—Å</b>\n<b>/–≤—ñ–¥ –æ–Ω–∞–Ω—ñ–∑–º</b>"
                                      "\n<b>/–≤—ñ–¥ –∑–∞—Å–æ—Å</b>\n<b>/—Å—Ç–∞—Ç—å</b>\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö—Ç–æ—Å—å —Ä–æ–∑—É–º–Ω–∏–π —á–∏ –¥—É—Ä–Ω–∏–π</b>"
                                      "\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞–∫ —á–∏ –Ω—ñ (–í –∫—ñ–Ω—Ü—ñ –æ–±–æ–≤—è–∑–∫–æ–≤–æ –Ω–∞–ø–∏—à–∏ ?, –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É: –∞–Ω–≥–µ–ª —Ç–∞–∫–µ –º–æ–∂–ª–∏–≤–µ?)</b>"
                                      "\n–¢–∞–∫–æ–∂ —è –º–∞—é –∑–≤–∏—á–∞–π–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —è–∫:\n<b>–ø–æ–∫–∞–∑–∞—Ç–∏ –Ω—ñ–∂–∫–∏</b>\n<b>–ê —Ç–∞–∫–æ–∂ —è –º–æ–∂—É –Ω–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ —è–∫ –∫—É–ø–∏—Ç–∏ "
                                      "–ø—ñ–∞—Ä –∞–±–æ –∞–¥–º—ñ–Ω–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∏—à–∏: –∫—É–ø–∏—Ç–∏ –ø—ñ–∞—Ä, –∞–±–æ –∫—É–ø–∏—Ç–∏ –∞–¥–º—ñ–Ω–∫—É</b>", parse_mode='html', disable_web_page_preview=True)














user_choices = {}

@bot.message_handler(commands=['—Å—Ç–∞—Ç—å'])
def handle_gender_choice(message):
    user_id = message.from_user.id
    if user_choices.get(user_id) is not None:
        bot.send_message(chat_id=message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å —É–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å, —è–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å —Ç–æ –ø—Ä–æ–ø–∏—à–∏ /–º–æ—è_—Å—Ç–∞—Ç—å')
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    male_button = types.InlineKeyboardButton(text='–ß–æ–ª–æ–≤—ñ—á–∞', callback_data='–ß–æ–ª–æ–≤—ñ—á–∞')
    female_button = types.InlineKeyboardButton(text='–ñ—ñ–Ω–æ—á–∞', callback_data='–ñ—ñ–Ω–æ—á–∞')
    markup.add(male_button, female_button)
    bot.send_message(chat_id=message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:', reply_markup=markup)
    user_choices[user_id] = None

@bot.callback_query_handler(func=lambda call: True)
def handle_gender_callback(call):
    user_id = call.from_user.id
    if user_choices.get(user_id) is not None:
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å —É–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å')
        return
    user_choices[user_id] = call.data
    if call.data == '–ß–æ–ª–æ–≤—ñ—á–∞':
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: –ß–æ–ª–æ–≤—ñ—á–∞')
    elif call.data == '–ñ—ñ–Ω–æ—á–∞':
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: –ñ—ñ–Ω–æ—á–∞')

@bot.message_handler(commands=['–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å'])
def handle_change_gender(message):
    user_id = message.from_user.id
    user_choices[user_id] = None
    markup = types.InlineKeyboardMarkup(row_width=2)
    male_button = types.InlineKeyboardButton(text='–ß–æ–ª–æ–≤—ñ—á–∞', callback_data='–ß–æ–ª–æ–≤—ñ—á–∞')
    female_button = types.InlineKeyboardButton(text='–ñ—ñ–Ω–æ—á–∞', callback_data='–ñ—ñ–Ω–æ—á–∞')
    markup.add(male_button, female_button)
    bot.send_message(chat_id=message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:', reply_markup=markup)

@bot.message_handler(commands=['–º–æ—è_—Å—Ç–∞—Ç—å'])
def handle_gender(message):
    user_id = message.from_user.id
    gender = user_choices.get(user_id)
    if gender is not None:
        bot.send_message(chat_id=message.chat.id, text=f'–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: {gender}')
    else:
        bot.send_message(chat_id=message.chat.id, text='–í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –æ–±—Ä–∞—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å    /—Å—Ç–∞—Ç—å')


@bot.message_handler(commands=['–≤—ñ–¥'])
def hug_or_kiss(message):
    words = message.text.lower().split()
    if len(words) < 2:
        bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é —â–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É")
    else:
        action = words[1]
        target = message.reply_to_message.from_user if message.reply_to_message else None
        if not target:
            bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É")
            return
        reply_user = message.reply_to_message.from_user
        action = message.text.split(' ')[1].lower()
        reason = ' '.join(message.text.split(' ')[2:]) if len(message.text.split(' ')) > 2 else ''
        if action == '–æ–±–Ω—è—Ç–∏':
            bot.send_message(message.chat.id, f"üòò {message.from_user.first_name} –æ–±–Ω—è–≤(-–ª–∞) {reply_user.first_name}\n{reason}")
            photo_choices = ['static/hugs/hugs_one.jpg', 'static/hugs/hugs_two.jpg', 'static/hugs/hugs_three.jpg',
                             'static/hugs/hugs_four.jpg', 'static/hugs/hugs_five.jpg', 'static/hugs/hugs_six.jpg',
                             'static/hugs/hugs_seven.jpg', 'static/hugs/hugs_eight.jpg', 'static/hugs/hugs_nine.jpg',
                             'static/hugs/hugs_ten.jpg']
        elif action == '–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏':
            bot.send_message(message.chat.id, f" üòò {message.from_user.first_name} –ø–æ—Ü—ñ–ª—É–≤–∞–≤(-–ª–∞) {reply_user.first_name}\n{reason}")
            photo_choices = ['static/kisses/kiss_one.jpg', 'static/kisses/kiss_two.jpg', 'static/kisses/kiss_three.jpg',
                             'static/kisses/kiss_four.jpg', 'static/kisses/kiss_one.jpg', 'static/kisses/kiss_five.jpg',
                             'static/kisses/kiss_six.jpg', 'static/kisses/kiss_seven.jpg', 'static/kisses/kiss_one.gif']
        elif action == '–≤–¥–∞—Ä–∏—Ç–∏':
            bot.send_message(message.chat.id, f" ü§úü§ï {message.from_user.first_name} –≤–¥–∞—Ä–∏–≤(-–ª–∞) {reply_user.first_name}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            photo_choices = ['static/bully/bully_one.gif', 'static/bully/bully_two.gif', 'static/bully/bully_three.gif',
                             'static/bully/bully_four.gif', 'static/bully/bully_five.gif', 'static/bully/bully_six.gif',
                             'static/bully/bully_seven.gif', 'static/bully/bully_eight.gif', 'static/bully/bully_nine.gif'
                             'static/bully/bully_ten.gif']
        elif action == '–æ–±—Ä–∞–∑–∏—Ç–∏':
            bot.send_message(message.chat.id, f"üòí {message.from_user.first_name} –æ–±—Ä–∞–∑–∏–≤(-–ª–∞) {reply_user.first_name}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            photo_choices = []
        elif action == '—á–º–æ–∫':
            bot.send_message(message.chat.id, f"ü§ó {message.from_user.first_name} —á–º–æ–∫–Ω—É–≤(-–ª–∞) {reply_user.first_name}\n{reason}")
            photo_choices = ['static/kisses/kiss_one.jpg', 'static/kisses/kiss_two.jpg', 'static/kisses/kiss_three.jpg', 'static/kisses/kiss_four.jpg', 'static/kisses/kiss_one.jpg', 'static/kisses/kiss_five.jpg', 'static/kisses/kiss_six.jpg', 'static/kisses/kiss_seven.jpg']
        elif action == '—à–ª—å–æ–ø':
            bot.send_message(message.chat.id, f"ü§ó {message.from_user.first_name} —à–ª—å–æ–ø–Ω—É–≤(-–ª–∞) {reply_user.first_name} —ñ –≤—ñ–Ω/–≤–æ–Ω–∞ –ø–æ–ø—Ä–æ—Å–∏–≤(-–ª–∞) —â–µ —Å–∏–ª—å–Ω—ñ—à–µ")
            photo_choices = ['static/slaps/slap_one.gif', 'static/slaps/slap_two.gif', 'static/slaps/slap_three.gif', 'static/slaps/slap_four.gif']
        elif action == '—Å–∏–ª—å–Ω–∏–π—à–ª—å–æ–ø':
            bot.send_message(message.chat.id, f"ü§ó {message.from_user.first_name} –∑—ñ –≤—Å—ñ—î—ó –¥—É—Ä—ñ —à–ª—å–æ–ø–Ω—É–≤(-–ª–∞) {reply_user.first_name} —ñ –≤–æ–Ω–∞ –¥–æ—Å—è–≥–ª–∞ –æ—Ä–≥–∞–∑–º—É ü§§")
            photo_choices = ['static/slaps/slap_one.gif', 'static/slaps/slap_two.gif', 'static/slaps/slap_three.gif', 'static/slaps/slap_four.gif']
        elif action in ('–∫–µ–∫—Å', '—Å–µ–∫—Å'):
            bot.send_message(message.chat.id, f"ü•µüò´ {message.from_user.first_name} —Ç—Ä–∞—Ö–Ω—É–≤(-–ª–∞) {reply_user.first_name}\n{reason}")
            photo_choices = ['static/se/se_one.gif', 'static/se/se_two.gif', 'static/se/se_three.webp']
        elif action == '–∑–∞—Å–æ—Å':
            bot.send_message(message.chat.id, f"ü•µ {message.from_user.first_name} –∑–∞—Ü—ñ–ª—É–≤–∞–≤(-–ª–∞) —Å–≤–æ—é –ø–æ–ª–æ–≤–∏–Ω–∫—É {reply_user.first_name}")
            photo_choices = ['static/strong_kiss/strong_kiss_one.gif', 'static/strong_kiss/strong_kiss_two.gif', 'static/strong_kiss/strong_kiss_three.webp']
        elif action == '—à—É—Ä–∏-–º—É—Ä–∏':
            bot.send_message(message.chat.id, f"ü§≠ {message.from_user.first_name} –ø–æ—à—É—Ä–∏-–º—É—Ä–∏–≤(-–ª–∞) {reply_user.first_name}")
            photo_choices = []
        elif action == '–≤—ñ–¥—Ä—ñ–∑–∞—Ç–∏':
            bot.send_message(message.chat.id, f"ü§≠ {message.from_user.first_name} –≤—ñ–¥—Ä—ñ–∑–∞–≤(-–ª–∞) {reply_user.first_name}")
            photo_choices = []
        elif action == '–≤–¥–æ—á–µ—Ä–∏—Ç–∏':
            bot.send_message(message.chat.id, f"ü§ó {message.from_user.first_name} –≤–¥–æ—á–µ—Ä–∏–≤(-–ª–∞) {reply_user.first_name}\n{reason}")
            photo_choices = ['static/ideas/ideas_one.gif']
        elif action == '–æ–Ω–∞–Ω—ñ–∑–º':
            bot.send_message(message.chat.id, f"ü•µ {message.from_user.first_name} –∑–∞–π–Ω—è–≤—Å—è —Å–∞–º–æ–∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º\n{reason}")
            photo_choices = ['static/onanism/onanizm_one.jpg']
        elif action == '–ø—Ä–æ–±–∞—á_–ª—é–±–∞':
            bot.send_message(message.chat.id, f"ü•∫ {message.from_user.first_name} –ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–∞—á–µ–Ω–Ω—è —É —Å–≤–æ—î—ó –ø–æ–ª–æ–≤–∏–Ω–∫–∏ {reply_user.first_name}\n{reason}")
            photo_choices = []
        else:
            bot.reply_to(message, "–ü–æ–º–∏–ª–∫–∞, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ó—ó –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å. –î–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /help_bot")
            return
        if photo_choices:
            photo_path = random.choice(photo_choices)
            if photo_path.endswith('.gif'):
                bot.send_animation(message.chat.id, open(photo_path, 'rb'))
            else:
                bot.send_photo(message.chat.id, open(photo_path, 'rb'))

user_choices = {}

def get_user_gender(user_id):
    gender = user_choices.get(user_id)
    if gender == '–ß–æ–ª–æ–≤—ñ—á–∞':
        return 'male'
    elif gender == '–ñ—ñ–Ω–æ—á–∞':
        return 'female'
    else:
        return None

@bot.message_handler(commands=['—Å—Ç–∞—Ç—å'])
def handle_gender_choice(message):
    user_id = message.from_user.id
    if user_choices.get(user_id) is not None:
        bot.send_message(chat_id=message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å —É–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å, —è–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å —Ç–æ –ø—Ä–æ–ø–∏—à–∏ /–º–æ—è_—Å—Ç–∞—Ç—å')
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    male_button = types.InlineKeyboardButton(text='–ß–æ–ª–æ–≤—ñ—á–∞', callback_data='–ß–æ–ª–æ–≤—ñ—á–∞')
    female_button = types.InlineKeyboardButton(text='–ñ—ñ–Ω–æ—á–∞', callback_data='–ñ—ñ–Ω–æ—á–∞')
    markup.add(male_button, female_button)
    bot.send_message(chat_id=message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:', reply_markup=markup)
    user_choices[user_id] = None

@bot.callback_query_handler(func=lambda call: True)
def handle_gender_callback(call):
    user_id = call.from_user.id
    if user_choices.get(user_id) is not None:
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å —É–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å')
        return
    user_choices[user_id] = call.data
    if call.data == '–ß–æ–ª–æ–≤—ñ—á–∞':
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: –ß–æ–ª–æ–≤—ñ—á–∞')
    elif call.data == '–ñ—ñ–Ω–æ—á–∞':
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: –ñ—ñ–Ω–æ—á–∞')

    # –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å get_user_gender
    if call.data in ['–æ–±–Ω—è—Ç–∏', '–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏', '–≤–¥–∞—Ä–∏—Ç–∏', '–æ–±—Ä–∞–∑–∏—Ç–∏', '—á–º–æ–∫', '—à–ª—å–æ–ø', '—Å–∏–ª—å–Ω–∏–π—à–ª—å–æ–ø', '–∫–µ–∫—Å', '—à—É—Ä–∏-–º—É—Ä–∏', '–æ–Ω–∞–Ω—ñ–∑–º']:
        gender = get_user_gender(user_id)
        # –∑–¥—ñ–π—Å–Ω—é—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞


@bot.message_handler(commands=['–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å'])
def handle_change_gender(message):
    user_id = message.from_user.id
    user_choices[user_id] = None
    markup = types.InlineKeyboardMarkup(row_width=2)
    male_button = types.InlineKeyboardButton(text='–ß–æ–ª–æ–≤—ñ—á–∞', callback_data='–ß–æ–ª–æ–≤—ñ—á–∞')
    female_button = types.InlineKeyboardButton(text='–ñ—ñ–Ω–æ—á–∞', callback_data='–ñ—ñ–Ω–æ—á–∞')
    markup.add(male_button, female_button)
    bot.send_message(chat_id=message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_gender_callback(call):
    user_id = call.from_user.id
    if user_choices.get(user_id) is not None:
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å —É–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å')
        return
    user_choices[user_id] = call.data
    if call.data == '–ß–æ–ª–æ–≤—ñ—á–∞':
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: –ß–æ–ª–æ–≤—ñ—á–∞')
    elif call.data == '–ñ—ñ–Ω–æ—á–∞':
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: –ñ—ñ–Ω–æ—á–∞')

@bot.message_handler(commands=['–º–æ—è_—Å—Ç–∞—Ç—å'])
def handle_gender(message):
    user_id = message.from_user.id
    gender = user_choices.get(user_id)
    if gender is not None:
        bot.send_message(chat_id=message.chat.id, text=f'–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: {gender}')
    else:
        bot.send_message(chat_id=message.chat.id, text='–í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –æ–±—Ä–∞—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /—Å—Ç–∞—Ç—å')

@bot.message_handler(
    commands=['–æ–±–Ω—è—Ç–∏', '–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏', '–≤–¥–∞—Ä–∏—Ç–∏', '–æ–±—Ä–∞–∑–∏—Ç–∏', '—á–º–æ–∫', '—à–ª—å–æ–ø', '—Å–∏–ª—å–Ω–∏–π—à–ª—å–æ–ø', '–∫–µ–∫—Å',
                '—à—É—Ä–∏-–º—É—Ä–∏', '–æ–Ω–∞–Ω—ñ–∑–º'])
def hug_or_kiss(message):
    gender = get_user_gender(message.from_user.id)  # –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if gender is None:
        bot.reply_to(message, '–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /—Å—Ç–∞—Ç—å')
        return

@bot.message_handler(commands=['–æ–±–Ω—è—Ç–∏'])
def hug(message):
    gender = get_user_gender(message.from_user.id)
    if gender == '–ß–æ–ª–æ–≤—ñ—á–∞':
        bot.send_message(chat_id=message.chat.id, text='–¢–∏ –∑–∞—Å–ª—É–≥–æ–≤—É—î—à –Ω–∞ –Ω–∞–π–∫—Ä–∞—â–µ –æ–±—ñ–π–º–∞–Ω–Ω—è –≤ —Å–≤—ñ—Ç—ñ! üí™ü§ó')
    elif gender == '–ñ—ñ–Ω–æ—á–∞':
        bot.send_message(chat_id=message.chat.id, text='–î–æ–∑–≤–æ–ª—å –º–µ–Ω—ñ —Ç–µ–±–µ –æ–±—ñ–π–Ω—è—Ç–∏! ü§óüíï')
    else:
        bot.send_message(chat_id=message.chat.id, text='–ù–µ –º–æ–∂—É –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–≤–æ—é —Å—Ç–∞—Ç—å, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —ó—ó –∫–æ–º–∞–Ω–¥–æ—é /—Å—Ç–∞—Ç—å')


user_choices = {}

def get_user_gender(user_id):
    gender = user_choices.get(user_id)
    if gender == '–ß–æ–ª–æ–≤—ñ—á–∞':
        return 'male'
    elif gender == '–ñ—ñ–Ω–æ—á–∞':
        return 'female'
    else:
        return None

@bot.message_handler(commands=['—Å—Ç–∞—Ç—å'])
def handle_gender_choice(message):
    user_id = message.from_user.id
    if user_choices.get(user_id) is not None:
        bot.send_message(chat_id=message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å —É–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å, —è–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å —Ç–æ –ø—Ä–æ–ø–∏—à–∏ /–º–æ—è_—Å—Ç–∞—Ç—å')
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    male_button = types.InlineKeyboardButton(text='–ß–æ–ª–æ–≤—ñ—á–∞', callback_data='male')
    female_button = types.InlineKeyboardButton(text='–ñ—ñ–Ω–æ—á–∞', callback_data='female')
    markup.add(male_button, female_button)
    bot.send_message(chat_id=message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:', reply_markup=markup)
    user_choices[user_id] = None

@bot.callback_query_handler(func=lambda call: True)
def handle_gender_callback(call):
    user_id = call.from_user.id
    if user_choices.get(user_id) is not None:
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å —É–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∏—à—ñ—Ç—å /–∑–º—ñ–Ω–∏—Ç–∏_—Å—Ç–∞—Ç—å')
        return
    user_choices[user_id] = call.data
    if call.data == 'male':
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: –ß–æ–ª–æ–≤—ñ—á–∞')
    elif call.data == 'female':
        bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Ç–∞—Ç—å –æ–±—Ä–∞–Ω–∞: –ñ—ñ–Ω–æ—á–∞')

@bot.message_handler(commands=['–æ–±–Ω—è—Ç–∏'])
def hug(update, context):
    user_id = update.message.from_user.id
    gender = get_user_gender(user_id)
    if gender == 'male':
        update.message.reply_text('–¢–∏ –æ–±—ñ–π–º–∞—î—à—Å—è –∑ —Ö–ª–æ–ø—Ü–µ–º. ‚ù§Ô∏è')
    elif gender == 'female':
        update.message.reply_text('–¢–∏ –æ–±—ñ–π–º–∞—î—à—Å—è –∑ –¥—ñ–≤—á–∏–Ω–æ—é. ‚ù§Ô∏è')
    else:
        update.message.reply_text('–¢–∏ –æ–±—ñ–π–º–∞—î—à—Å—è –∑—ñ —Å—Ç–≤–æ—Ä—ñ–Ω–Ω—è–º. ‚ù§Ô∏è')
















proposals = {}

@bot.message_handler(func=lambda message: message.text.startswith('/–æ–¥—Ä—É–∂–∏—Ç–∏—Å—è'))
def handle_all_messages(message):
    chat_id = message.chat.id
    reply_user = message.reply_to_message.from_user if message.reply_to_message else None
    text = message.text

    if text == '/start_Angel32':
        bot.send_message(chat_id,
                        '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–¥—Ä—É–∂–µ–Ω–Ω—è. –Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –æ–¥—Ä—É–∂–∏—Ç–∏—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /–æ–¥—Ä—É–∂–∏—Ç–∏—Å—è, —â–æ–± –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ä—É–∫—É —ñ —Å–µ—Ä—Ü–µ –∫–æ–º—É—Å—å.')

    elif text == '/–æ–¥—Ä—É–∂–∏—Ç–∏—Å—è' and reply_user:
        proposals[reply_user.id] = {
            'from_user_id': message.from_user.id,
            'chat_id': chat_id
        }  # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –æ–¥—Ä—É–∂–µ–Ω–Ω—è
        keyboard = types.InlineKeyboardMarkup()
        button_accept = types.InlineKeyboardButton(text='–¢–∞–∫', callback_data='accept')
        button_decline = types.InlineKeyboardButton(text='–ù—ñ', callback_data='decline')
        keyboard.row(button_accept, button_decline)
        bot.send_message(chat_id,
                         f"–°—å–æ–≥–æ–¥–Ω—ñ {message.from_user.first_name} —Ö–æ—á–µ –æ–¥—Ä—É–∂–∏—Ç–∏—Å—è –∑ {reply_user.first_name}, —á–∏ –ø—Ä–∏–π–º–∞—î—à —Ç–∏ –π–æ–≥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è?",
                         reply_markup=keyboard)

    else:
         bot.send_message(chat_id, "–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å–∫–∞–∑–∞—Ç–∏.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
   print(call.data)
   chat_id = call.message.chat.id
   user_id = call.from_user.id
   proposal = proposals.get(user_id)
   if proposal is None or proposal['chat_id'] != chat_id or proposal['reply_user_id'] is None:
       bot.answer_callback_query(call.id, text="–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.", show_alert=True)
       return
   reply_user_id = proposal['reply_user_id']
   reply_user = bot.get_chat_member(chat_id, reply_user_id).user
   if call.data == 'accept':
       bot.send_message(chat_id,
                        f"{reply_user.first_name}, {call.from_user.first_name} –ø–æ–≥–æ–¥–∏–≤—Å—è –æ–¥—Ä—É–∂–∏—Ç–∏—Å—è –∑ –≤–∞–º–∏! ‚ù§Ô∏è")
   elif call.data == 'decline':
       bot.send_message(chat_id, f"{reply_user.first_name}, {call.from_user.first_name} –≤—ñ–¥—Ö–∏–ª–∏–≤ –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é. üòî")
   del proposals[user_id]

@bot.message_handler(commands=['–≤–¥—É—à'])
def handle_shower_command(message):
    current_time = datetime.utcnow().time()
    if current_time >= time(19, 0) and current_time <= time(19, 30):
        bot.reply_to(message, '–Ø –≤—ñ–¥—ñ–π—à–ª–∞ –≤ –¥—É—à')
    else:
        bot.reply_to(message, '–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∑ 19:00 –¥–æ 19:30')


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text.lower() in ['–∞–Ω–≥–µ–ª –ø—Ä–µ–¥—Å—Ç–∞–≤—Å—è', '–∞–Ω–≥–µ–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è', '–∞–Ω–≥–µ–ª —Ö—Ç–æ —Ç–∏', '–∞–Ω–≥–µ–ª –∫–æ–º–∞–Ω–¥–∏']:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç, —è –∞–Ω–≥–µ–ª, —è –º–æ–∂—É —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏ –∞–±–æ –∂ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞–∫—ñ —è–∫:\n\n<b>/–≤—ñ–¥ –≤–¥–∞—Ä–∏—Ç–∏</b>, \n<b>/–≤—ñ–¥ –æ–±–Ω—è—Ç–∏</b>, \n<b>/–≤—ñ–¥ –ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏</b> \n<b>/–≤—ñ–¥ –æ–±—Ä–∞–∑–∏—Ç–∏</b>\n<b>/–≤—ñ–¥ —á–º–æ–∫</b>\n<b>/–≤—ñ–¥ —à–ª—å–æ–ø</b>\n<b>/–≤—ñ–¥ —Å–∏–ª—å–Ω–∏–π—à–ª—å–æ–ø</b>\n<b>/–≤—ñ–¥ –∫–µ–∫—Å –∞–±–æ –∂ /–≤—ñ–¥ —Å–µ–∫—Å</b>\n<b>/–≤—ñ–¥ –æ–Ω–∞–Ω—ñ–∑–º</b>\n<b>/–≤—ñ–¥ –∑–∞—Å–æ—Å</b>\n<b>/—Å—Ç–∞—Ç—å</b>'
                                          '\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö—Ç–æ—Å—å —Ä–æ–∑—É–º–Ω–∏–π —á–∏ –¥—É—Ä–Ω–∏–π</b>\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞–∫ —á–∏ –Ω—ñ (–í –∫—ñ–Ω—Ü—ñ –æ–±–æ–≤—è–∑–∫–æ–≤–æ –Ω–∞–ø–∏—à–∏ ?, –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É: –∞–Ω–≥–µ–ª —Ç–∞–∫–µ –º–æ–∂–ª–∏–≤–µ?)</b>\n–¢–∞–∫–æ–∂ —è –º–∞—é –∑–≤–∏—á–∞–π–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —è–∫:\n\n<b>–ø–æ–∫–∞–∑–∞—Ç–∏ –Ω—ñ–∂–∫–∏</b>\n\n<b>–ê —Ç–∞–∫–æ–∂ —è –º–æ–∂—É –Ω–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ —è–∫ –∫—É–ø–∏—Ç–∏ –ø—ñ–∞—Ä –∞–±–æ –∞–¥–º—ñ–Ω–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∏—à–∏: –∫—É–ø–∏—Ç–∏ –ø—ñ–∞—Ä, –∞–±–æ –∫—É–ø–∏—Ç–∏ –∞–¥–º—ñ–Ω–∫—É</b>'
                                          '\n–Ü —Ö–ª–æ–ø—á–∏–∫–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –±—É–¥—å—Ç–µ –∑—ñ –º–Ω–æ—é –ª–∞–≥—ñ–¥–Ω—ñ –∞ —Ç–∞–∫–æ–∂ —ñ–∑ —Å–≤–æ—ó–º–∏ –¥—ñ–≤—á–∞—Ç–∫–∞–º–∏'.format(message.from_user, bot.get_me()),
        parse_mode='html')
        photo_choices = ['static/01.jpg']
        photo = open(random.choice(photo_choices), 'rb')
        bot.send_photo(message.chat.id, photo)
    elif message.text.lower() in ['–∞–Ω–≥–µ–ª –ø—Ä–∏–≤—ñ—Ç', '–∞–Ω–≥–µ–ª —Ö–∞–π', '–∞–Ω–≥–µ–ª –ø—Ä–∏–≤–µ—Ç']:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç')
    elif message.text.lower() in ['–∞–Ω–≥–µ–ª —è–∫ —Ç–∏?', '–∞–Ω–≥–µ–ª —Ç–∏ —è–∫?']:
        bot.send_message(message.chat.id, '–£—Å–µ –≥–∞—Ä–∞–∑–¥, –∞ —Ç–∏ —è–∫?')
    elif message.text.lower() in ['–¥—è–∫—É—é –∞–Ω–≥–µ–ª', '–∞–Ω–≥–µ–ª –¥—è–∫—É—é']:
        bot.send_message(message.chat.id, '–ó–∞–≤–∂–¥–∏ –ø—Ä–æ—à—É, –∫–æ—à–µ–Ω—è—Ç–∫–æ üòò')
#=================================================================================================================
    elif message.reply_to_message is not None and message.text.lower() == '–∞–Ω–≥–µ–ª —Å–∫–∞–∂–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —Ä–æ–∑—É–º–Ω–∏–π?':
        bot.send_message(message.chat.id, f"–ù–µ–±–µ—Å–∞ –∫–∞–∂—É—Ç—å —â–æ –≤—ñ–Ω —Ä–æ–∑—É–º–Ω–∏–π –Ω–∞ {random.randint(0, 100)}%")
    elif message.reply_to_message is not None and message.text.lower() in ['–∞–Ω–≥–µ–ª —Å–∫–∞–∂–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ —Ä–æ–∑—É–º–Ω–∞?', '–∞–Ω–≥–µ–ª –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ —Ä–æ–∑—É–º–Ω–∞']:
        bot.send_message(message.chat.id, f"–ù–µ–±–µ—Å–∞ –∫–∞–∂—É—Ç—å —â–æ –≤–æ–Ω–∞ —Ä–æ–∑—É–º–Ω–∞ –Ω–∞ {random.randint(0, 100)}%")
    elif message.reply_to_message is not None and message.text.lower() == '–∞–Ω–≥–µ–ª —Å–∫–∞–∂–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –¥—É—Ä–Ω–∏–π?':
        bot.send_message(message.chat.id, f"–ù–µ–±–µ—Å–∞ –∫–∞–∂—É—Ç—å —â–æ –≤—ñ–Ω –¥—É—Ä–Ω–∏–π –Ω–∞ {random.randint(0, 100)}%")
    elif message.reply_to_message is not None and message.text.lower() == '–∞–Ω–≥–µ–ª —Å–∫–∞–∂–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –¥—É—Ä–Ω–∞?':
        bot.send_message(message.chat.id, f"–ù–µ–±–µ—Å–∞ –∫–∞–∂—É—Ç—å —â–æ –≤–æ–Ω–∞ –¥—É—Ä–Ω–∞ –Ω–∞ {random.randint(0, 100)}%")
#======================================================================================================================
    elif message.text.lower().startswith('–∞–Ω–≥–µ–ª') and '?' in message.text.lower():
        bot.send_message(message.chat.id, random.choice(['–¢–∞–∫', '–ù—ñ']))
    elif message.text.lower().startswith('–∞–Ω–≥–µ–ª') and '—Ö—Ç–æ' in message.text.lower():
        bot.send_message(message.chat.id, random.choice(['–¢–∏', '–ù—ñ—Ö—Ç–æ']))

    elif message.text.lower() in ['–∞–Ω–≥–µ–ª —É–º–Ω—ñ—á–∫–∞', '–∞–Ω–≥–µ–ª —Ç–∏ —É–º–Ω—ñ—á–∫–∞', '–∞–Ω–≥–µ–ª —Ç–∏ –º–æ–ª–æ–¥–µ—Ü—å', '–∞–Ω–≥–µ–ª –º–æ–ª–æ–¥–µ—Ü—å']:
        bot.send_message(message.chat.id, '–î—è–∫—É—é –∫–æ—à–µ–Ω–Ω—è—Ç–∫–æ –º–æ—î üòç üòò, –º–µ–Ω—ñ –ø—Ä–∏—î–º–Ω–æ —Ü–µ –∑–Ω–∞—Ç–∏')
    elif message.text.lower() in ['–∞–Ω–≥–µ–ª —Ç–∏ —Ç—É—Ç?', '–∞–Ω–≥–µ–ª —Ç–∏ –¥–µ', '–∞–Ω–≥–µ–ª —Ç–∏ —Ç—É—Ç', '–∞–Ω–≥–µ–ª —Ç–∏ –¥–µ?', '–∞–Ω–≥–µ–ª']:
        bot.send_message(message.chat.id, '–¢–∞–∫ —è —Ç—É—Ç, –ø—Ä–æ–±–∞—á —â–æ –∑–∞—Ç—Ä–∏–º–∞–ª–∞')
    elif message.text.lower() in ['–ø–æ–∫–∞–∑–∞—Ç–∏ –Ω—ñ–∂–∫–∏', '–Ω—ñ–∂–∫–∏', '–∞–Ω–≥–µ–ª –ø–æ–∫–∞–∂–∏ –Ω—ñ–∂–∫–∏', '–∞–Ω–≥–µ–ª –ø–æ–∫–∞–∂–∏ —Å–≤–æ—ó –Ω—ñ–∂–∫–∏', '–ø–æ–∫–∞–∂–∏ –Ω—ñ–∂–∫–∏']:
        bot.send_message(message.chat.id, f"ü§ó {message.from_user.first_name} –≤–∏—Ä—ñ—à–∏–≤(-–ª–∞) –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –Ω—ñ–∂–∫–∏")
        photo_choices = ['static/legs/legs_(1).jpg', 'static/legs/legs_(2).jpg', 'static/legs/legs_(3).jpg',
                     'static/legs/legs_(4).jpg', 'static/legs/legs_(5).jpg', 'static/legs/legs_(6).jpg',
                     'static/legs/legs_(7).jpg', 'static/legs/legs_(8).jpg', 'static/legs/legs_(9).jpg',
                     'static/legs/legs_(10).jpg', 'static/legs/legs_(11).jpg', 'static/legs/legs_(12).jpg',
                     'static/legs/legs_(13).jpg', 'static/legs/legs_(14).jpg', 'static/legs/legs_(15).jpg',
                     'static/legs/legs_(16).jpg', 'static/legs/legs_(17).jpg', 'static/legs/legs_(18).jpg',
                     'static/legs/legs_(19).jpg', 'static/legs/legs_(20).jpg', 'static/legs/legs_(21).jpg',
                     'static/legs/legs_(22).jpg', 'static/legs/legs_(23).jpg', 'static/legs/legs_(24).jpg',
                     'static/legs/legs_(25).jpg', 'static/legs/legs_(26).jpg', 'static/legs/legs_(27).jpg',
                     'static/legs/legs_(28).jpg', 'static/legs/legs_(29).jpg', 'static/legs/legs_(30).jpg',
                     'static/legs/legs_(31).jpg', 'static/legs/legs_(32).jpg']
        photo_path = random.choice(photo_choices)
        with open(photo_path, 'rb') as photo_file:
            bot.send_photo(message.chat.id, photo_file)
    elif message.text.lower() in ['–∫—É–ø–∏—Ç–∏ –∞–¥–º—ñ–Ω–∫—É', '–∫—É–ø–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É', '–∫—É–ø–∏—Ç–∏ –ø—ñ–∞—Ä', '–ø—ñ–∞—Ä']:
        bot.send_message(message.chat.id, '–û–£–£–£ —á—É–¥–æ–≤–∞ —ñ–¥–µ—è, —Ç–æ–¥—ñ –æ—Å—å —Ç–æ—é–±—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n'
                                          '–ú–æ–ª–æ–¥—à–∏–π –∞–¥–º—ñ–Ω - 20 –≥—Ä–Ω\n'
                                          '–°—Ç–∞—Ä—à–∏–π 50 –≥—Ä–Ω\n'
                                          '–¢–∞–∫–æ–∂ —Ç–∏ –º–æ–∂–µ—à –ø—Ä–∏–¥–±–∞—Ç–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –æ–ø—É–±–ª—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ —É —Ü—ñ–π –≥—Ä—É–ø—ñ, '
                                          '–æ—Å—å —Ü—ñ–Ω–∏:\n'
                                          '–ü—ñ–∞—Ä 1 –¥–µ–Ω—å - 30 –≥—Ä–Ω,\n'
                                          '2 –¥–Ω—è - 50 –≥—Ä–Ω,\n'
                                          '1 —Ç–∏–∂–¥–µ–Ω—å - 100 –≥—Ä–Ω\n'
                                          '–≥—Ä–æ—à—ñ —Å–∫–∏–¥—É–π –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ <code>5375 4114 2241 8942</code>, '
                                          '–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π —Ç–≤–æ—ó –≥—Ä–æ—à—ñ –ø—ñ–¥—É—Ç—å –Ω–∞ –¥–æ–±—Ä—ñ —Å–ø—Ä–∞–≤–∏ –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ \n \n'
                                          '–Ø–∫—â–æ —Ç–∏ –≤—Å–µ –∂ —Ç–∞–∫–∏ –Ω–µ —Ö–æ—á–µ—à –∫—É–ø–ª—è—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤, —Ç–æ–¥—ñ –≤–∏–∫–æ–Ω—É–π –∫–≤–µ—Å—Ç–∏ —è–∫—ñ —â–æ–¥–Ω—è —Å–∫–∏–¥—É—é—Ç—å'
                                          '–Ω–∞—à—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏, –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫–≤–µ—Å—Ç–∏ —á–∏—Ç–∞–π —Ç—É—Ç:\n'
                                          '<a href="https://t.me/ukraine_young_chat/827665" target="_blank">https://t.me/ukraine_young_chat/827665</a>', parse_mode='html', disable_web_page_preview=True)

bot.polling(none_stop=True)